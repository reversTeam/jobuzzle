class Translator {

	_defaultLang = 'EN_us';
	_currentLang = 'EN_us';
	_translation = {};

	#default get, set for _currentLang;
	#default get, set for _defaultLang;
	#default get, set for _translation;

	initialize: function() {
		this.setTranslation(serviceLocator.get('Translation'));
		this.setDefaultLang(Config['language']['default']);
		this.setCurrentLang(Config['language']['default']);
	}

	translate : function(key, params) {
		var ret = this._translation.getTranslation(key, this.getCurrentLang());
		if (!ret)
			ret = this._translation.getTranslation(key, this.getDefaultLang())
		if (!ret)
			ret = '{{ __EMPTY_TRANSLATION ['+ key +']__ }}';
		else if (params)
			ret = this.injectVars(ret, params);
		return ret;
	}

	translateRoute : function (key) {
		var ret = this._translation.getTranslationRoute(key, this.getCurrentLang());
		if (!ret)
			ret = this._translation.getTranslationRoute(key, this.getDefaultLang());
		if (!ret)
			ret = '{{ __EMPTY_TRANSLATION ['+ key +']__ }}';
		return ret;
	}

	injectVars : function (str, params) {
		for (var i in params) {
			str = str.replace(new RegExp('{{'+ i +'}}'), params[i]);
		}
		return str;
	}

}

#export Translator;