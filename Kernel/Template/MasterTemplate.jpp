/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:13:11
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-09-15 19:03:15
**************************************************************/

#import (Config.path +'/Kernel/Utility') = Utility;

class MasterTemplate {

	_viewClassName = 'MasterView';
	_view_class = undefined;
	_view = undefined;

	_templateManager = undefined;

	#default get for _viewClassName;
	#default set, get for _templateManager;

	/**
	* initialize
	**/
	initialize : function () {
		this.setTemplateManager(serviceLocator.get('TemplateManager'));
		this.onListen();
	}

	/**
	* for listen
	**/
	onListen : function () {
		return serviceLocator.get('Dispatcher');
	}

	/**
	* for listen when view is init
	**/
	onListenView : function () {
		return serviceLocator.get('Dispatcher');	
	}

	/**
	* get template view
	**/
	getTemplate : function (template_name, parent) {
		return React['createElement'](this.getTemplateManager().get(template_name).getView(parent), null);
	}

	/**
	* Bullshit react
	**/
	getView : function (parent) {
		if (this._view_class == undefined) {
			var self = this;
			this._view = window[this.getViewClassName()];
			var tmp = function (props, context) {
				window[self.getViewClassName()].call(this, props, context);
				self._view = this;
				self.onListenView.bind(self);
			}
			if (window[this.getViewClassName()] == undefined)
				throw "Cannot be create "+ this.getViewClassName() +" Object";
			tmp.prototype = Object.create(window[this.getViewClassName()].prototype);
			tmp.prototype['_template'] = this;
			tmp._template_static = this;
			this._view_class = tmp;
		}

		return this._view_class;
	}

}

#export MasterTemplate;