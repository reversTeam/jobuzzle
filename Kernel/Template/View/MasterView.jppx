var tmp = React['createClass']({

	"getInitialState": function () {
		if (this.getInitialStateBis) {
			var obj = this.getInitialStateBis();
			obj.key = this.getKey();
			return obj;
		}
		return {
			key: this.getKey()
		};
	},

	"render" : function () {
		throw "It's an abstract view, you can't instancied an object if you don't have override render method"
	}

});

class MasterView extends tmp {

	_templateManager = undefined;

	#default get, set for _templateManager;

	_current_key_index = 0;

	initialize : function (props, context) {
		this.setTemplateManager(serviceLocator.get('TemplateManager'));
		_super(props, context);
	}

	getKey: function () {
		return this._template.getViewClassName() + (this._current_key_index++);
	}

	link : function (e) {
		if (e == undefined || e == null || e.target == undefined || e.target == null)
			throw "You can't call directly link";
		var url = e.target.getAttribute('data-url');
		if (url == null || url == undefined)
			throw "You can't redirect with an empty URL";
		var dispatcher = serviceLocator.get('Dispatcher');
		dispatcher.trigger('Navigation:Link:onClick', {
			url : url,
			template : e.target.getAttribute('data-template')
		});
	}

	getTemplate : function (template_name) {
		var template = this.getTemplateManager().get(template_name);
		if (!template)
			throw "Template "+ template_name +" is invalid";
		return React['createElement'](template.getView(this._template), {key : this.getKey() });
	}

	render = function () {
		this.state.key = 'MasterView';
		return React.createElement("div", {onClick: this.test.bind(this)}, this.state.n)
	}

}

#export MasterView;