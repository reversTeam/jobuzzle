/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:13:11
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-09-20 13:13:39
**************************************************************/

var tmp = React['createClass']({

	/**
	* Initial state for react
	**/
	"getInitialState": function () {
		if (this.initialState) {
			var obj = this.initialState();
			obj.key = this.getKey();
			return obj;
		}
		return {
			key: this.getKey()
		};
	},

	/**
	* render for react
	**/
	"render" : function () {
		throw "It's an abstract view, you can't instancied an object if you don't have override render method"
	}

});

class MasterView extends tmp {

	_templateManager = undefined;

	public _template = undefined;
	_allTemplate = {};
	_allView = {};

	#default get, set for _templateManager;

	_current_key_index = 0;

	/**
	*  Bullshit react
	**/
	initialize : function (props, context) {
		this.setTemplateManager(serviceLocator.get('TemplateManager'));
		_super(props, context);
	}

	/**
	* Return key for optimise react js
	**/
	getKey: function () {
		return this['_template'].getViewClassName() + (this._current_key_index++);
	}

	/**
	* Method for create an link
	**/
	public link : function (e) {
		if (e == undefined || e == null || e.target == undefined || e.target == null)
			throw "You can't call directly link";
		var url = e.target.getAttribute('data-url');
		var parent = e.target.parentElement;
		while (!url && parent) {
			url = parent.getAttribute('data-url');
			if (url)
				break ;
			parent = parent.parentElement;
		}
		if (url == null || url == undefined) {
			throw "You can't redirect with an empty URL";
		}
		var dispatcher = serviceLocator.get('Dispatcher');
		dispatcher.trigger('Navigation:Link:onClick', url);
	}

	getHelper : function (helperName, params) {
		var helperManager = serviceLocator.get('HelperManager');

		helper = helperManager.get(helperName);
		helper.injectParams(params);
			
		return React.createElement(helper.getView(), null);
	}

	/**
	* Get a template
	**/
	getTemplate : function (template_name, params) {
		if (!this._allTemplate[template_name]) {
			this._allTemplate[template_name] = this.getUniqueTemplate(template_name, params);
		}
		return this._allTemplate[template_name];
	}

	/**
	* Get an template
	**/
	getUniqueTemplate : function (template_name, params) {
		var template = this.getTemplateManager().get(template_name);
		if (!template)
			throw "Template "+ template_name +" is invalid";
		if (!params || params == null || params == undefined)
			params = {};
		params.key = this.getKey();
		return React['createElement'](template.getView(), params);
	}

	/**
	* Defautl render
	**/
	public render = function () {
		this.state.key = 'MasterView';
		return React['createElement']("div", {}, this.state.n)
	}

}

#export MasterView;