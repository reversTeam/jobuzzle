/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:13:11
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-11-05 16:59:58
**************************************************************/

#import ('../MasterRoute') = MasterRoute;
#import ('../../Utility') = Utility;

class MasterRouteType {

	#default get for _name;
	#default set for _controller;
	#default get for _childs;
	#default get for _routeUrl;
	#default get for _options;

	#default get, set for _method;
	#default get, set for _parent;

	_typePatternRoute = null;

	/**
	* Initialize object
	**/
	initialize : function (name, routes, parent) {
		if (!routes || !routes['action'] || !routes['action']['method'])
			throw 'You can\'t create an empty route or route with empty action method';
		this._childs = {};
		this.setName(name);
		this.setParent(parent);
		this.setRouteUrl(routes['route']);
		this.setController(routes['action']['controller']);
		this.setMethod(routes['action']['method']);
		this.setOptions(routes['options']);
		this.createChilds(routes['childs']);
	}

	/**
	* Get current controller
	**/
	getController : function () {
		if (this._controller)
			return this._controller;
		else if (this.getParent())
			return this.getParent().getController();
		else
			throw 'You don\'t teach controller for your route';
	}

	/**
	* Add a child route
	**/
	createChilds : function (childs) {
		if (!childs)
			return ;
		for (var i in childs) {
			this.addRoute(i, childs[i], this);
		}
	}

	/**
	* Add an route
	**/
	addRoute : function (name, route, parent, type) {
		if (route instanceof MasterRoute)
			route = route.getRoutes();
		var req = Utility.require(Config['path'] +'/Kernel/Route/Type/'+ route.type +'RouteType');
		this._childs[name] = new req(name, route, parent);
	}

	/**
	* Build a route with route and params
	**/
	build : function (segment, datas) {
		if (!segment)
			return false;
		return this.inject(segment, datas);
	}

	/**
	* Inject params in segment route
	**/
	inject : function (segment, datas) {
		if (segment == this._routeUrl)
			return segment;
		return false;
	}

	/**
	* Get current route
	**/
	getRoute : function (name) {
		if (!this._childs[name])
			return false;
		return this._childs[name];
	}

	/**
	* Get Childs routes
	**/
	getRoutes : function () {
		return this.getChilds();
	}

	/**
	* Set the name for the route
	**/
	setName : function (name) {
		if (!name)
			throw 'You don\'t teach name for your route';
		this._name = name;
	}

	/**
	* Add route url and check type
	**/
	setRouteUrl : function (route) {
		if (!route)
			throw 'You don\'t teach pattern for your route';
		this._routeUrl = route;
		var reg = new RegExp('^'+ this._typePatternRoute +'$');
		if (!reg.test(this._routeUrl))
			throw '"'+ route +'" it\'s not a good type for your route'; 
	}

	/**
	* add options route
	**/
	setOptions : function (options) {
		this._options = null;
		if (options) {
			this._options = options;
		}	
	}

	/**
	*
	**/
	match : function (segment) {
		if (!segment)
			return false;
		var ret = this.parse(segment);

		if (ret)
			return ret;

		return false;
	}

	/**
	* 
	**/
	parse : function (segment) {
		throw 'You can\'t call MasterRouteType Parse, please override function parse';
	}

}

#export MasterRouteType;