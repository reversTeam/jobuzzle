#import ('../MasterRoute') = MasterRoute;
#import ('../../Utility') = Utility;

class MasterRouteType {

	#default get for _name;
	#default set for _controller;
	#default get for _childs;
	#default get for _routeUrl;
	#default get for _options;

	#default get, set for _method;
	#default get, set for _parent;

	_typePatternRoute = { "Translation" : "{([^}]+)}", "Parameters" : ":(\.*)", "Literale" : "(.*)" };

	initialize : function (name, routes, parent) {
		if (!routes || !routes['action'] || !routes['action']['method'])
			throw 'You can\'t create an empty route or route with empty action method';
		this._childs = {};
		this.setName(name);
		this.setParent(parent);
		this.setRouteUrl(routes['route']);
		this.setController(routes['action']['controller']);
		this.setMethod(routes['action']['method']);
		this.setOptions(routes['options']);
		this.createChilds(routes['childs']);
	}

	getController : function () {
		if (this._controller)
			return this._controller;
		else if (this.getParent())
			return this.getParent().getController();
		else
			throw 'You don\'t teach controller for your route';
	}

	createChilds : function (childs) {
		if (!childs)
			return ;
		for (var i in childs) {
			this.addRoute(i, childs[i], this);
		}
	}

	addRoute : function (name, route, parent, type) {
		if (route instanceof MasterRoute)
			route = route.getRoutes();
		var req = Utility.require(Config.path +'/Kernel/Route/Type/'+ route.type +'RouteType');
		this._childs[name] = new req(name, route, parent);
	}

	getRoute : function (name) {
		if (!this._childs[name])
			return false;
		return this._childs[name];
	}

	getRoutes : function () {
		return this.getChilds();
	}

	setName : function (name) {
		if (!name)
			throw 'You don\'t teach name for your route';
		this._name = name;
	}

	setRouteUrl : function (route) {
		if (!route)
			throw 'You don\'t teach pattern for your route';
		
		var i = '';
		var reg = {};
		route = route.substr(1);

		for (i in this._typePatternRoute) {
			reg = new RegExp('^'+ this._typePatternRoute[i] +'$');
			if (reg.test(route)) {
				break ;
			}
		}
		this._routeUrl = {};
		this._routeUrl['parseBy'] = i;
		this._routeUrl['value'] = route;
	}

	setOptions : function (options) {
		this._options = null;
		if (options) {
			this._options = options;
		}	
	}

	match : function (segment) {
		if (!segment)
			return false;
		var route = this.getRouteUrl();
		var ret = this['matchWith'+ route['parseBy']](segment);

		if (ret)
			return ret;

		return false;
	}

	public matchWithTranslation : function (segment) {
		var reg = new RegExp('^'+ this._typePatternRoute['Translation'] +'$');
		var translation_key = reg.exec(this._routeUrl['value']);

		if (translation_key) {
			if (serviceLocator.get('Translator').translate(translation_key[1]) == segment) {
				return true;
			}
		}
		return false;
	}

	public matchWithParameters : function (segment) {
		var reg = new RegExp('^'+ this._typePatternRoute['Parameters'] +'$');
		var params_key = reg.exec(this._routeUrl['value']);

		if (params_key) {
			var options = this.getOptions();
			reg = new RegExp('^('+ options[params_key[1]] +')$');
			var result = reg.exec(segment);
			if (result) {
				var ret = {};
				ret[params_key[1]] = segment;
				return ret;
			}
		}
		return false;
	}

	public matchWithLiterale : function (segment) {
		return segment == this._routeUrl['value'];
	}

}

#export MasterRouteType;