/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:13:11
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-11-03 15:56:03
**************************************************************/

#import ('./Route/MasterRoute') = MasterRoute;
#import ('./Utility') = Utility;

class Router {

	_current = undefined;
	_currentParams = {};
	_lastRouteName = undefined;
	_parentEntity = undefined;
	_lastEntityType = undefined;

	#default get, set for _current;
	#default get, set for _currentParams;
	#default get, set for _parentEntity;
	#default get, set for _lastRouteName;
	#default get, set for _lastEntityType;

	initialize : function () {
		this._routes = {};
	}

	addRoute : function (name, routes) {
		if (!name || !routes)
			throw 'You can\'t add empty route name or routes';
		if (routes instanceof MasterRoute) {
			this._routes[name] = this.buildRoute(name, routes);
		}
		else 
			this._routes[name] = routes;
	}

	getRoute : function (name) {
		if (!name)
			throw 'You can\'t get route empty name';
		return this._routes[name];
	}

	getRoutes : function () {
		return this._routes;
	}

	build : function (str, datas) {
		var routes = this.getRoutes();
		if (str && str.charAt(0) == '/') {
			str = str.substr(1);
			var segments = str.split('/');
		} else {
			if (datas instanceof window["ElementDataMainEntity"])
				return this.entityRoute(datas, str);
			else {
				var segments = (this.getCurrent().substr(1) + '/' + str).split('/');
				datas = this.merges(datas, this._currentParams);
			}
		}

		return this.buildRecusiveRoute(segments, routes, datas, 0);
	}

	buildPartial : function (segments) {
		var route = this._current + (segments ? '/'+ segments : '');
		return this.build(route, this._currentParams);
	}

	buildPartialForApi : function (segments) {
		var serviceManager = serviceLocator.get('ServiceManager');
		var collectionManager = serviceLocator.get('CollectionManager');
		var store = serviceManager.get('store_manager_main_service');
		var routes = this.getRoutes();
		var currentRoute = this._current.substr(1) + (segments ? '/'+ segments : '')
		var currentRouteTab = currentRoute.split('/');
		var n = 1;
		var cur = routes[currentRouteTab[0]];
		var params = {};

		while (cur && cur._childs[currentRouteTab[n]]) {
			cur = cur._childs[currentRouteTab[n]];
			if (cur instanceof ParamsRouteType) {
				var filterMethod = 'findBy';
				var routeUrl = cur.getRouteUrl().substr(1);
				var routeType = routeUrl.split('_')[0];
				var routeFilter = routeUrl.split('_')[1];
				var collection = collectionManager.get(routeType.toLowerCase()+ '_data_main_collection');
				var entity = undefined;

				filterMethod += routeFilter.charAt(0).toUpperCase() + routeFilter.substr(1);

				entity = store.getAll(collection.getEntityType())[filterMethod](this._currentParams[routeUrl]);
				if (!entity)
					return null;

				params[routeUrl] = entity.getId();
			}
			++n;
		}

		return this.build('/'+ currentRoute, params);
	}

	entityRoute : function (entity, str, forApi) {
		forApi = (forApi === true || str === true) ? true : false;
		var result = {};
		var routeManager = serviceLocator.get('RouteManager');
		var cur = entity;
		var str = (typeof str === 'string') ? ('/'+ str) : '';

		var datas = {};
		while (cur && cur.getParentidEntityRoute()) {
			var type = cur.getType();
			var route = routeManager.get(type.toLowerCase() + '_data_main_route');
			var routeView = route.getRoutes()['childs']['view']['route'].substr(1);
			str = '/'+ route.getName() +'/view' + str;
			if (forApi)
				datas[routeView] = cur.getId();
			else {
				var method = routeView.split('_')[1];
				method = 'get'+ method.charAt(0).toUpperCase() + method.substr(1);
				if (cur[method]() == undefined)
					return null;
				datas[routeView] = cur[method]();
			}
			cur = cur.getParentEntityRoute();
		}
		return this.buildRecusiveRoute(str.substr(1).split('/'), this.getRoutes(), datas, 0);
	}

	entityRouteForApi : function (entity, str) {
		return this.entityRoute(entity, str, true);
	}

	merges : function (tab1, tab2) {
		var tab = {};
		for (var i in tab1) {
			tab[i] = tab1[i];
		}
		for (var i in tab2) {
			tab[i] = tab2[i];	
		}
		return tab;
	}

	buildRoute : function (key, cur) {
		var routes = {};

		if (cur instanceof MasterRoute)
			routes = cur.getRoutes();
		else {
			routes = cur;
			cur = null;
		}
		if (!routes.type)
			throw 'Cannot determined type for your route';
		var req = Utility.require(Config['path'] + '/Kernel/Route/Type/'+ routes.type +'RouteType');
		return new req(key, routes, cur);
	}

	match : function (str) {
		str = str.substr(1);
		var segments = str.split('/');
		var routes = this.getRoutes();
		this._current = '';
		this._currentParams = {};
		this._currentEntity = {};
		this._lastEntityType = undefined;
		this._lastRouteName = undefined;
		var result = this.matchRecusiveRoute(segments, routes, 0);

		return result;
	}

	buildRecusiveRoute : function (segments, routes, datas, index) {
		var buildResult = undefined;
		var childResult = undefined;

		for (var i in routes) {
			buildResult = routes[i].build(segments[index], datas);
			if (buildResult && segments[index + 1]) {
				childResult = this.buildRecusiveRoute(segments, routes[i].getRoutes(), datas, index + 1);
				if (childResult)
					return '/'+ buildResult + childResult;
			} else if (buildResult)
				return '/'+ buildResult;
		}
		return false;
	}

	loadEntity : function (route, segment) {
		var router = serviceLocator.get('Router');
		var store = serviceLocator.get('ServiceManager').get('store_manager_main_service');
		var self = this;
		var key = route.getRouteUrl().substr(1);
		var params = key.split('_');
		var elementType = params[0];
		var type = params[1];
		var filterMethod = 'filterBy';
		var filter = {};
		filterMethod += type.charAt(0).toUpperCase() + type.slice(1);
		filter[filterMethod] = segment;
		this.setLastEntityType(elementType);
		store.request(router.build('/'+ elementType), {
			'filter' : [
				filter
			]
		}, function (response) {
			if (response.result.length) {
				var entity = store.get(response['result'][0]['id']);

				if (entity.getType().toLowerCase() == self.getLastEntityType()) {
					this._parentEntity = entity;
					dispatcher.trigger('Router:setParentEntity:'+ self.getLastRouteName(), {'entity' : entity});
				}
				dispatcher.trigger(elementType.toLowerCase() +':load:entity', {'entity' : entity});
			} else {
				dispatcher.trigger('Error:url:404');
			}
		});
		this._currentParams[key] = segment;
	}

	matchRecusiveRoute : function (segments, routes, index) {
		var result = {};
		var match = undefined;
		var dispatcher = serviceLocator.get('Dispatcher');

		for (var i in routes) {
			match = routes[i].match(segments[index]);
			if (match && (segments[index + 1])) {
				if (routes[i] instanceof ParamsRouteType) {
					this.loadEntity(routes[i], segments[index]);
				}
				this._current += '/'+ routes[i].getName();
				return this.concatResultMatch(match, this.matchRecusiveRoute(segments, routes[i].getRoutes(), index + 1));
			} else if (match) {
				if (routes[i] instanceof ParamsRouteType) {
					this.loadEntity(routes[i], segments[index]);
					this._currentParams[routes[i].getRouteUrl().substr(1)] = segments[index];
				}
				this._current += '/'+ routes[i].getName();
				if (match !== true)
					result = match;
				var entityType = routes[i].getController().split('_')[0];
				this.setLastRouteName(entityType.toLowerCase());
				result['actions'] = {};
				result['actions']['controller'] = routes[i].getController();
				result['actions']['method'] = routes[i].getMethod();
				if (this.getLastEntityType() == undefined)
					result['actions']['noParent'] = this.getLastRouteName();
				return result;
			}
		}
		return false;
	}

	concatResultMatch : function (tab1, tab2) {
		if (!tab2)
			return false;
		if (tab2 == true)
			return tab1;
		if (tab1 == true)
			return tab2;
		for (var i in tab2) {
			tab1[i] = tab2[i];
		}
		return tab1;
	} 

}

#export Router;