/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:13:11
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-09-12 01:48:10
**************************************************************/

class Translation {

	/**
	* Config for accepted language
	**/
	_lang = {
		"FR_fr" : {},
		"EN_us" : {}
	};

	/**
	* Config for accepted route language
	**/
	_routes = {
		"FR_fr" : {},
		"EN_us" : {}
	};

	/**
	* Initialize object
	**/
	initialize : function () {
		this.initTranslationRoutes(Config['translation']);
		this.initTranslation(Config['translation']);
	}

	/**
	* Initialize register translation route
	**/
	initTranslationRoutes : function (translations) {
		for (var lang in translations) {
			if (translations[lang]['routes']) {
				for (var i in translations[lang]['routes']) {
					this.addTranslationRoute(lang, i, translations[lang]['routes'][i]);
				}
				delete translations[lang]['routes'];
			}
		}
	}

	/**
	* Initialize register translation
	**/
	initTranslation : function (translations) {
		for (var lang in translations) {
			if (translations[lang]) {
				this.addTranslationInLang(lang, translations[lang], '');
			}
		}
	}

	/**
	* Add a translation for specifique langue
	**/
	addTranslationInLang : function (lang, translations, base) {
		if (base !== '')
			base += '.';
		for (var i in translations) {
			if (typeof translations[i] === 'string')
				this.addTranslation(lang, base + i, translations[i]);
			else
				this.addTranslationInLang(lang, translations[i], base + i);
		}
	}

	/**
	* Registered a translation
	**/
	addTranslation : function (lang, key, value) {
		this._lang[lang][key] = value;
	}

	/**
	* Registered a route
	**/
	addTranslationRoute : function (lang, key, value) {
		this._routes[lang][key] = value;
	}

	/**
	* Get an translation by key and with lang
	**/
	getTranslation : function (key, lang) {
		return this._lang[lang][key];
	}

	/**
	* get translation route by key and with lang 
	**/
	getTranslationRoute : function (key, lang) {
		return this._routes[lang][key];
	}

}

#export Translation;