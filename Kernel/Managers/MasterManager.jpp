#import ('fs') = fs;
#import ('../Utility') = Utility;
class MasterManager {

	pathDir = 'Kernel';
	#default get, set for pathDir;

	initialize : function () {
		this._all = {
			invokables : {},
			factories : {}
		};
	}

	public add : function (key, value, module, type) {
		this._all[type][key] = module +'/'+ this.getPathDir() +'/'+ value;
	}

	public get : function (key) {
		var obj = this.getFactory(key);
		if (!obj)
			obj = this.getInvokables(key);
		if (!obj)
			throw 'Manager "'+ key +'" is not defined';
		return obj;
	}

	public getInvokables : function (key) {
		if (this._all['invokables'][key]) {
			return this.getObject(this._all['invokables'][key], 'invokables');
		}
		return false;
	}

	public getFactory : function (key) {
		if (this._all['factories'][key]) {
			var obj = this.getObject(this._all['factories'][key], 'factories');
			if (!obj)
				throw 'Factory "'+ key +'" doesn\'t have invokables';
			return obj;
		}
		return false;
	}

	getObject : function (pathFile, type) {
		var pathToFile = Config.path +'/Modules/'+ pathFile;
		var req = {};
		var obj = {};

		req = Utility.require(pathToFile);
		obj = new req();
		if (type == 'factories')
			return obj.create(this);
		else
			return obj;
	}

}

#export MasterManager;