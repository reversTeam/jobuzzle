/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:13:11
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-08-08 14:33:59
**************************************************************/

#import ('fs') = fs;
#import ('../Utility') = Utility;
class MasterManager {

	_name = 'MasterManager';
	_fileConf = 'master';
	_defaultShared = false;

	#default get for _name;
	#default get for _fileConf;
	#default get for _defaultShared;

	initialize : function () {
		this._all = {
			"invokables" : {},
			"factories" : {},
			"shared" : {},
			"static" : {}
		};

		this._static = {};
	}

	add : function (key, value, module, type) {
		this._all[type][key] = module +'/Bundle/'+ value;
	}

	get : function (key) {
		var shared = this.isShared(key);
		if (shared && this._static[key])
			return this._static[key];

		var obj = this.getFactory(key);
		if (!obj)
			obj = this.getInvokables(key);
		if (!obj)
			throw 'Manager "'+ key +'" is not defined';
		if (shared)
			this._static[key] = obj;
		return obj;
	}

	addShared : function (key, value) {
		this._all['shared'][key] = value;
	}

	isShared : function (key) {
		if (this._all['shared'][key] != undefined)
			return this._all['shared'][key];
		return this.getDefaultShared();
	}

	getInvokables : function (key) {
		if (this._all['invokables'][key]) {
			return this.getObject(this._all['invokables'][key], 'invokables');
		}
		return false;
	}

	getFactory : function (key) {
		if (this._all['factories'][key]) {
			var obj = this.getObject(this._all['factories'][key], 'factories');
			if (!obj)
				throw 'Factory "'+ key +'" doesn\'t have invokables';
			return obj;
		}
		return false;
	}

	getObject : function (pathFile, type) {
		var pathToFile = Config['path'] +'/Modules/'+ pathFile;
		var req = {};
		var obj = {};

		req = Utility.require(pathToFile);
		obj = new req();
		if (type == 'factories')
			return obj.create(this);
		else
			return obj;
	}

}

#export MasterManager;