#import ('fs') = fs;
#import ('./Utility') = Utility;

class ServiceLocator {

	initialize : function () {
		this._component = {};
		this._component['invokables'] = {};
		this._component['factories'] = {};
	}

	init : function () {
		if (!Config.servicelocator)
			return ;

		if (Config.servicelocator.invokables) {
			for (var i in Config.servicelocator.invokables) {
				this.add(i, Config.servicelocator.invokables[i], 'invokables');
			}
		}

		if (Config.servicelocator.factories) {
			for (var i in Config.servicelocator.factories) {
				this.add(i, Config.servicelocator.factories[i], 'factories');
			}
		}
	}

	public get : function (key) {
		var obj = this.getFactory(key);
		if (!obj) {
			obj = this.getInvokables(key);
			if (!obj)
				throw 'ServiceLocator cannot be resolved "'+ key +'"';
		}
		return obj;
	}

	public add : function (key, value, type) {
		var pathfile = Config.path +'/'+ value;
		var req = {};
		var obj = {};

		req = Utility.require(pathfile);
		obj = new req();
		if (type == 'invokables')
			this._component[type][key] = obj;
		else
			this._component[type][key] = obj.create();

	}

	getFactory : function (key) {
		if (this._component['factories'][key]) {
			var obj = this._component['factories'][key];
			if (!obj)
				throw 'ServiceLocator dosen\'t success call invokables for "'+ key +'" factory';
			return obj;
		}
		return false;
	}

	getInvokables : function (key) {
		if (this._component['invokables'][key])
			return this._component['invokables'][key];
		return false;
	}

}

#export ServiceLocator;