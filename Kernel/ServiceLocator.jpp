/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:13:11
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-08-08 16:32:15
**************************************************************/

#import ('fs') = fs;
#import ('./Utility') = Utility;

class ServiceLocator {

	_defaultShared = true;

	#default get, set for _defaultShared;

	/**
	* Initialize attribute
	**/
	initialize : function () {
		this._all = {};
		this._all['invokables'] = {};
		this._all['factories'] = {};
		this._all['shared'] = {};

		this._static = {};
	}

	/**
	* Register all managers
	**/
	init : function () {
		if (!Config['servicelocator'])
			return ;

		if (Config['servicelocator']['shared']) {
			for (var i in Config['servicelocator']['shared']) {
				this.addShared(i, Config['servicelocator']['shared'][i]);
			}
		}

		if (Config['servicelocator']['invokables']) {
			for (var i in Config['servicelocator']['invokables']) {
				this.add(i, Config['servicelocator']['invokables'][i], 'invokables');
			}
		}

		if (Config['servicelocator']['factories']) {
			for (var i in Config['servicelocator']['factories']) {
				this.add(i, Config['servicelocator']['factories'][i], 'factories');
			}
		}
	}

	/**
	* Call for get manager
	**/
	get : function (key) {
		var shared = this.isShared(key);
		if (shared && this._static[key])
			return this._static[key];

		var obj = this.getFactory(key);
		if (!obj) {
			obj = this.getInvokables(key);
			if (!obj)
				throw 'ServiceLocator cannot be resolved "'+ key +'"';
		}
		return obj;
	}

	/**
	* Add an manager
	**/
	add : function (key, value, type) {
		var pathfile = Config['path'] +'/'+ value;
		var req = {};
		var obj = {};

		if (this.isShared(key)) {
			req = Utility.require(pathfile);
			obj = new req();
			if (type == 'factories')
				obj = obj.create();
			this._static[key] = obj;
		} else {
			this._all[type][key] = value;
		}

	}

	/**
	* add shared manager
	**/
	addShared : function (key, value) {
		this._all['shared'][key] = value;
	}

	/**
	* check if manager is shared
	**/
	isShared : function (key) {
		if (this._all['shared'][key] != undefined)
			return this._all['shared'][key];
		return this.getDefaultShared();
	}

	/**
	* get an invokable manager
	**/
	getInvokables : function (key) {
		if (this._all['invokables'][key]) {
			return this.getObject(this._all['invokables'][key], 'invokables');
		}
		return false;
	}

	/**
	* get a factory manager
	**/
	getFactory : function (key) {
		if (this._all['factories'][key]) {
			var obj = this.getObject(this._all['factories'][key], 'factories');
			if (!obj)
				throw 'Factory "'+ key +'" doesn\'t have invokables';
			return obj;
		}
		return false;
	}

	/**
	* Get an object all type
	**/
	getObject : function (pathFile, type) {
		var pathToFile = Config['path'] +'/'+ pathFile;
		var req = {};
		var obj = {};

		req = Utility.require(pathToFile);
		obj = new req();
		if (type == 'factories')
			obj = obj.create(this);
		return obj;
	}

}

#export ServiceLocator;