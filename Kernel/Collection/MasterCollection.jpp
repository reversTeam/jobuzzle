class MasterCollection {

	_entityType = 'Master';
	_entityClass = 'Master';
	_sock = undefined;

	#default get for _entityType;
	#default get for _entityClass;
	#default get for _childs;
	#default get, set for _parent;

	initialize : function () {
		var serviceManager = serviceLocator.get('ServiceManager');
		this._sock = serviceManager.get('client_websocket_main_service');
		this._protected = undefined;
		this._parent = null;
		this._childs = {};
		this._entity = {};
	}

	addChilds : function (childs, store) {
		var collectionManager = serviceLocator.get('CollectionManager');
		var collection = undefined;

		for (var name in childs) {
			collection = collectionManager.get(name);
			collection.addChilds(childs[name]);
			collection.setParent(this);
			this._childs[collection.getEntityType()] = collection;
		}
	}

	getProtected : function () {
		if (this._protected == undefined) {
			this._protected = Config.collections.upload.protected;
		}
		return this._protected;
	}

	get : function (id) {
		if (!this._entity[id])
			return false;
		return this._entity[id];
	}

	getAll : function (type) {
		var ret = undefined;
		if (type == undefined || type == this.getEntityType())
			return this;
		for (i in this._childs) {
			ret = this._childs[i].getAll(type)
			if (ret)
				return ret;
		}
		return false;
	}

	create : function (entity) {
		var child = undefined;
		var parent = this.getParent();
		var dispatcher = serviceLocator.get('Dispatcher');
		var events = [];

		if (this._entity[entity.id]) {
			this.update(entity.id, entity);
			return true;
		}
		else {
			var entityClass = serviceLocator.get('EntityManager').get(this.getEntityClass());
			entityClass.hydrate(entity);
			this._entity[entity.id] = entityClass;
			events.push(this.getEntityType());
			while (parent != null) {
				parent._entity[entity.id] = this._entity[entity.id];
				events.push(parent.getEntityType());
				parent = parent.getParent();
			}
			return events;
		}
		return false;
	}

	update : function (id, datas) {
		if (!this.get(id))
			return false;
		var dispatcher = serviceLocator.get('Dispatcher');
		var type = this.get(id).getType();
		var collection = this.getAll(type);
		var parent = collection.getParent();
		collection.updateEntity(id, datas);
		dispatcher.trigger('Store:'+ this.getEntityType() +'-'+ id +':update');
		dispatcher.trigger('Store:'+ this.getEntityType() +':update', { id : id });

		while (parent) {
			dispatcher.trigger('Store:'+ parent.getEntityType() +'-'+ id +':update');
			dispatcher.trigger('Store:'+ parent.getEntityType() +':update', { id : id });
			parent = parent.getParent();
		}
		return true;
	}

	updateEntity : function (id, datas) {
		var fn = '';
		for (var i in datas) {
			if (this.getProtected().indexOf(i) == -1)
				fn = 'set'+ i.charAt(0).toUpperCase() + i.substr(1);
				if (typeof this._entity[id][fn] == 'function')
					this._entity[id][fn](datas[i]);
		}
		
		return true;
	}

	delete : function (id) {
		if (!this._entity[id])
			return false;
		var dispatcher = serviceLocator.get('Dispatcher');
		var type = this.get(id).getType();
		var collection = this.getAll(type);

		for (var i in this._entity[id])
				delete this._entity[id][i];
		while (collection) {
			delete collection._entity[id];
			dispatcher.trigger('Store:'+ collection.getEntityType() +'-'+ id +':delete');
			dispatcher.trigger('Store:'+ collection.getEntityType() +':delete', { id : id });
			collection = collection.getParent();
		}
	}

}

#export MasterCollection;