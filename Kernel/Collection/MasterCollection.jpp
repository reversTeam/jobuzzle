/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:13:11
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-10-01 15:50:42
**************************************************************/

class MasterCollection {

	public _entityType = 'Master';
	public _entityClass = 'Master';
	public _sock = undefined;
	_events = {};

	/**
	* Name Type : identity by type for entity 
	**/
	#default get for _entityType;

	/**
	* ClassName
	**/
	#default get for _entityClass;

	/**
	* Childs collection
	**/
	#default get for _childs;

	/**
	* Parent collection
	**/
	#default get, set for _parent;

	/**
	* Initialize collection register socket
	**/
	initialize : function () {
		var serviceManager = serviceLocator.get('ServiceManager');
		this['_sock'] = serviceManager.get('client_websocket_main_service');
		this['_protect'] = undefined;
		this['_parent'] = null;
		this['_childs'] = {};
		this['_entity'] = {};
	}

	/**
	* Add an child collection in current collection
	**/
	addChilds : function (childs, store) {
		var collectionManager = serviceLocator.get('CollectionManager');
		var collection = undefined;

		for (var name in childs) {
			collection = collectionManager.get(name);
			collection.addChilds(childs[name]);
			collection.setParent(this);
			this['_childs'][collection.getEntityType()] = collection;
		}
	}

	/**
	* Get attribute protect configuration for collection
	**/
	getProtect : function () {
		if (this['_protect'] == undefined) {
			this['_protect'] = Config['collections']['upload']['protect'];
		}
		return this['_protect'];
	}

	/**
	* Get an entity by id
	**/
	get : function (id) {
		if (!this['_entity'][id])
			return false;
		return this['_entity'][id];
	}

	/**
	* Method for get an collection
	* by default return the master collection
	**/
	getAll : function (type) {
		var ret = undefined;
		if (type == undefined || type == this.getEntityType())
			return this;
		for (i in this['_childs']) {
			ret = this['_childs'][i].getAll(type)
			if (ret)
				return ret;
		}
		return false;
	}

	/**
	* Method call when an new element is add
	* Check if exist, if exist send for update
	* else add in colleciton, register for all parent
	* and send event for creation element
	* Store:ENTITY_TYPE:create
	* same for all parent type
	**/
	public create : function (entity) {
		var child = undefined;
		var parent = this.getParent();
		var dispatcher = serviceLocator.get('Dispatcher');
		var events = [];

		if (this['_entity'][entity.id]) {
			this.update(entity.id, entity);
			return true;
		}
		else {
			var entityClass = serviceLocator.get('EntityManager').get(this.getEntityClass());
			entityClass.hydrate(entity);
			this['_entity'][entity.id] = entityClass;
			dispatcher.trigger('Store:'+ this.getEntityType() +'-'+ entity.id +':create');
			events.push(this.getEntityType());
			while (parent != null) {
				parent['_entity'][entity.id] = this['_entity'][entity.id];
				dispatcher.trigger('Store:'+ parent.getEntityType() +'-'+ entity.id +':create');
				events.push(parent.getEntityType());
				parent = parent.getParent();
			}
			return events;
		}
		return false;
	}

	public sendUpdateEvent : function (type) {
		if (this._events[type])
			clearInterval(this._events[type]);
		this._events[type] = setTimeout(function() {
			var dispatcher = serviceLocator.get('Dispatcher');
			dispatcher.trigger('Store:'+ type +':update');
		}, 150);
	}

	/**
	* Mehtod is call when entity is update
	* Send event by Dispatcher :
	* 	- Store:ENTITY_TYPE:update
	* 	- Store:ENTITY_TYPE-ENTITY_ID:update
	* And send same event for all parent type
	**/
	public update : function (id, datas) {
		if (!this.get(id))
			return false;
		var dispatcher = serviceLocator.get('Dispatcher');
		var type = this.get(id).getType();
		var collection = this.getAll(type);
		var parent = collection.getParent();
		collection.updateEntity(id, datas);
		dispatcher.trigger('Store:'+ collection.getEntityType() +'-'+ id +':update');
		this.sendUpdateEvent(collection.getEntityType());

		while (parent) {
			dispatcher.trigger('Store:'+ parent.getEntityType() +'-'+ id +':update');
			this.sendUpdateEvent(parent.getEntityType());
			parent = parent.getParent();
		}
		return true;
	}

	/**
	* Method call by update
	* Update an entity in collection
	* Check if attribut update is not protect
	* if entity have callback call that callback
	**/
	updateEntity : function (id, datas) {
		var fn = '';
		for (var i in datas) {
			if (this.getProtect().indexOf(i) == -1)
				fn = 'set'+ i.charAt(0).toUpperCase() + i.substr(1);
				if (typeof this['_entity'][id][fn] == 'function')
					this['_entity'][id][fn](datas[i]);
		}
		
		return true;
	}

	/**
	* Delete an entity in collection
	* Send event :
	*	- Store:ENTITY_TYPE:remove
	*	- Storde:ENTITY_TYPE-ENTITY_ID:remove
	**/
	public remove : function (id) {
		if (!this['_entity'][id])
			return false;
		var dispatcher = serviceLocator.get('Dispatcher');
		var type = this.get(id).getType();
		var collection = this.getAll(type);

		for (var i in this['_entity'][id])
				delete this['_entity'][id][i];
		while (collection) {
			delete collection['_entity'][id];
			dispatcher.trigger('Store:'+ collection.getEntityType() +'-'+ id +':remove');
			dispatcher.trigger('Store:'+ collection.getEntityType() +':remove', { 'id' : id });
			collection = collection.getParent();
		}
	}

}

#export MasterCollection;