class MasterCollection {

	_entityType = 'Master';
	_sock = undefined;

	#default get for _entityType;
	#default get for _childs;
	#default get, set for _parent;

	initialize : function () {
		var serviceManager = serviceLocator.get('ServiceManager');
		this._sock = serviceManager.get('client_websocket_main_service');
		this._parent = null;
		this._childs = {};
		this._entity = {};
	}

	addChilds : function (childs, store) {
		var collectionManager = serviceLocator.get('CollectionManager');
		var collection = undefined;

		for (var name in childs) {
			collection = collectionManager.get(name);
			collection.addChilds(childs[name]);
			collection.setParent(this);
			this._childs[collection.getEntityType()] = collection;
		}
	}

	get : function (id) {
		if (!this._entity[id])
			return false;
		return this._entity[id];
	}

	getAll : function () {
		return this._entity;
	}

	create : function (entity) {
		if (this._entity[entity.id]) {
			this.update(entity.id, entity);
			return true;
		}
		else {
			if (this.getEntityType() == entity.type || this.createByStorePropagation(entity)) {
				this.pushEntity(entity.id, entity);
				return true;
			}
		}
		return false;
	}

	createByStorePropagation : function (entity) {
		for (var i in this._childs) {
			ret = this._childs[i].create(entity) || this.getEntityType() == entity.type;
			if (!ret)
				continue ;
			this.pushEntity(entity.id, entity);
			return true;
		}
		return false;
	}

	update : function (id, datas) {
		if (!this._entity[id])
			throw "You can't update that entity, because entity["+ id +"] not found";
		for (var i in this._entity[id]) {
			if (!datas[id] || datas[i] != this._entity[id][i])
				delete this._entity[id][i];
		}
		for (var i in datas) {
			this._entity[id][i] = datas[i];
		}
	}

	delete : function (id) {
		for (var i in this._childs) {
			if (this._childs[i].deleteByStore(id))
				break;
		}
		if (this._entity[id]) {
			for (var i in this._entity[id])
				delete this._entity[id][i];
			delete this._entity[id];
			return true;
		}
		return false;
	}

	pushEntity : function (id) {
		var store = serviceLocator.get('ServiceManager').get('store_manager_main_service');
		this._entity[id] = store.get(id);
	}

}

#export MasterCollection;