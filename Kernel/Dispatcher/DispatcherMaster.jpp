/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:13:11
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-08-08 14:33:59
**************************************************************/

class MasterDispatcher {

	#default get for _listeners;

	initialize : function () {
		this._listeners = {};
	}

	/* Methode abstraite pour enregister un listener
	** -> name : nom de l'event (*:*:*), * = tous le scope d'event
	** -> obj : Objet de reference pour le listener
	** -> callback : Une fonction a appeler, lors de l'appel, le this sera `obj`
	**/
	abstract listen: function (name, obj, callback) {}

	/* Methode abstraite pour supprimer un listener 
	** -> name : nom de l'event (*:*:*), * = tous le scope d'event
	** -> obj : Objet correspondant au listener de l'event
	**/
	abstract unlisten: function (name, obj) {}

	/* Methode abstraite pour lancer un event
	** -> name : nom de l'event, (scope1:scope2:scope3)
	** -> arr_params : Tableau de parametres a envoyer aux listeners
	*/
	abstract trigger: function (name, arr_params) {}

}

#export MasterDispatcher;