/**************************************************************
*     ####         #                               #          * Jobuzzle - Copyright All rights reserved
*     ####         #                               #          *
*       ##  #####  ######  #     # ####### ####### #  #####   * @Author: revers
*       ## #     # #     # #     #      #       #  # #     #  *
*       ## #     # #     # #     #     #       #   # #     #  * @Date:   2015-08-08 11:13:11
*       ## #     # #     # #     #    #       #    # #     #  *
*       ## #     # #     # #     #   #       #     # ######   * @Last Modified by:   revers
*  ####### #     # #     # #     #  #       #      # #        *
*  ######   #####   ######  #####  ####### ####### # #######  * @Last Modified time: 2015-08-08 15:44:23
**************************************************************/

/**
* MasterAutoload : Is a class base for initialize
* your modules
**/
class MasterAutoload {

	/**
	* Name of your module
	**/
	confModuleName = '';

	#default get, set for confModuleName;

	/**
	* initialize is constructor of your class
	* Get module config
	* registered translation module
	* registered managers module
	**/
	initialize : function () {
		if (!Config['modules'] || !Config['modules'][this.getConfModuleName()])
			return ;
		var translations = Config['modules'][this.getConfModuleName()]['translation'];
		var translation = serviceLocator.get('Translation');
		if (translations) {
			translation.initTranslationRoutes(translations);
			translation.initTranslation(translations);
		}

		this.initManagers();
	}

	/**
	* Method call when Module is create
	**/
	onBootstrap : function () {

	}

	/**
	* Method call when all module is registered
	**/
	init : function () {
		
	}

	prepare : function () {
		
	}

	/**
	* initManagers : get all managers config
	* registered manager module in ServiceManager
	**/
	initManagers : function () {
		var managers = Config['managers'];
		var len = managers.length;

		for (var i = 0; i < len; ++i) {
			var manager = serviceLocator.get(managers[i]);
			if (Config['modules'][this.getConfModuleName()]['manager'])
				var confManager = Config['modules'][this.getConfModuleName()]['manager'][manager.getFileConf()];
			if (confManager)
				this.addInManager(manager, confManager);
		}
	}

	/**
	* Method call by initManagers
	* Registered your managers Module
	**/
	addInManager : function (manager, confManager) {
		if (confManager['shared']) {
			for (var i in confManager['shared']) {
				manager.addShared(i, confManager['shared'][i]);
			}
		}
		if (confManager['invokables']) {
			for (var i in confManager['invokables']) {
				manager.add(i, confManager['invokables'][i], this.getConfModuleName(), 'invokables');
			}
		}
		if (confManager['factories']) {
			for (var i in confManager['factories'])
				manager.add(i, confManager['factories'][i], this.getConfModuleName(), 'factories');
		}
	}

}

#export MasterAutoload;
