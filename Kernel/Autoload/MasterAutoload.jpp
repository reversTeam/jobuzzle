class MasterAutoload {

	confModuleName = '';

	#default get, set for confModuleName;

	initialize : function () {
		if (!Config['modules'] || !Config['modules'][this.getConfModuleName()])
			return ;
		var translation = Config['modules'][this.getConfModuleName()]['translation'];
		var translator = serviceLocator.get('Translator');
		if (translation) {
			translator.initTranslationRoutes(translation);
			translator.initTranslation(translation);
		}
		this.initManager('ServiceManager', 'service');
		this.initManager('RouteManager', 'route');
		this.initManager('ModelManager', 'model');
		this.initManager('TemplateManager', 'template');
		this.initManager('ControllerManager', 'controller');
		this.initManager('EntityManager', 'entity');
	}

	onBootstrap : function () {

	}

	initManager : function (managerName, managerConf) {
		var manager = serviceLocator.get(managerName);
		if (Config['modules'][this.getConfModuleName()]['manager'])
		var confManager = Config['modules'][this.getConfModuleName()]['manager'][managerConf];
		if (!confManager)
			return ;
		this.addInManager(manager, confManager);
	}

	addInManager : function (manager, confManager) {
		if (confManager['shared']) {
			for (var i in confManager['shared']) {
				manager.addShared(i, confManager['shared'][i]);
			}
		}
		if (confManager['invokables']) {
			for (var i in confManager['invokables']) {
				manager.add(i, confManager['invokables'][i], this.getConfModuleName(), 'invokables');
			}
		}
		if (confManager['factories']) {
			for (var i in confManager['factories'])
				manager.add(i, confManager['factories'][i], this.getConfModuleName(), 'factories');
		}
	}

}

#export MasterAutoload;